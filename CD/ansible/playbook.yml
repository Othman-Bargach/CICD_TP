---
- name: Déployer l'API Flask sur le noeud
  hosts: all
  become: yes   # Exécute les tâches avec les privilèges administrateur (sudo)
  
  vars:
    app_dir: '/home/ubuntu/flask_app'   # Répertoire cible de l'application sur la VM
    flask_port: 5000                    # Port d'écoute de l'application Flask

  tasks:
    - name: Installer les dépendances système
      apt:
        name:
          - python3
          - python3-pip
#          - git
        state: present
        update_cache: yes   # Met à jour le cache des paquets avant installation

# Ancienne méthode : clonage du dépôt Git (désactivée car le code est déjà dans le repo principal) :
# ----------------------------------------------------------------------
#    - name: Ajouter GitHub à known_hosts
#      known_hosts:
#        name: github.com
#        key: "{{ lookup('pipe', 'ssh-keyscan github.com') }}"
#        path: /home/ubuntu/.ssh/known_hosts
#        state: present
#      # Permet d'éviter les avertissements SSH lors de la connexion à GitHub
#
#    - name : Copier la clé SSH
#      copy:
#        src: files/id_ansible_deploy
#        dest: /home/ubuntu/.ssh/id_rsa
#        owner: ubuntu
#        group: ubuntu
#        mode: '0600'
#      # Déploie la clé privée SSH sur la VM pour d'éventuelles connexions Git (optionnel ici)
#
#    - name: Cloner le dépôt Git
#      git:
#        repo: git@github.com:Othman-Bargach/backend-flask.git
#        dest: '{{ app_dir }}'
#        version: main
#        force: yes
#      environment:
#        GIT_SSH_COMMAND: "ssh -i /home/ubuntu/.ssh/id_rsa -o StrictHostKeyChecking=no"
# ----------------------------------------------------------------------

    - name: Copier le code backend-flask local sur la machine cible
      copy:
        src: "{{ playbook_dir }}../../app/backend-flask/""
        dest: "{{ app_dir }}/"
        mode: '0755'
      # Copie le code source du backend depuis le repo local du runner vers la VM cible

    - name: Installer virtualenv
      apt:
        name: python3-venv
        state: present
      # Installe le module pour créer des environnements virtuels Python

    - name: Créer un environnement virtuel
      command: python3 -m venv {{ app_dir }}/venv
      args:
        creates: "{{ app_dir }}/venv/bin/activate"
      # Crée un virtualenv Python dans le dossier de l'application (si non déjà créé)

    - name: Installer les dépendances dans le virtualenv
      command: '{{ app_dir }}/venv/bin/pip install --upgrade -r {{ app_dir }}/requirements.txt'
      # Installe les dépendances Python de l'application dans le virtualenv

    - name : ouvrir le port 5000
      ufw:
        rule: allow
        port: '{{ flask_port }}'
        proto: tcp
      # Ouvre le port 5000 sur le firewall pour permettre l'accès à l'API Flask

    - name: Lancer l'application Flask
      shell: |
        cd {{ app_dir }}
        nohup ./venv/bin/python ./app.py --host=0.0.0.0 --port=5000 &
      # Démarre l'application Flask en arrière-plan, accessible sur le réseau
